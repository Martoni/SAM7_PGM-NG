/*
 * AT91SAM7 Programmer, http://www.pjrc.com/arm/sam7_pgm
 * Copyright (c) 2005, PJRC.COM, LLC, <paul@pjrc.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; version 2
 * of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */


/*
 * arm-elf-as flasher.armasm -o flasher.armobj
 * arm-elf-objdump -d flasher.armobj > flasher.armlst
 * ./armlst2c flasher
*/


config_table:
	.int	0x00100000		/* location to write into flash */
	.int	0			/* page number */
	.int	128			/* number of bytes to write */
	.int	0			/* reserved for 4th param in future */

begin:
	bx	lr

	mov	r4, #0xFFFFF4FF
	and	r4, r4, #FFFFFF00
	mov	r0, #15
	str	r0, [r4]
	str	r0, [r4, #0x10]
	mov	r0, #1
	str	r0, [r4, #0x34]

begin_again:

	/* first, check if the flash is ready and wait if necessary */
	mov	r0, #0xFFFFFF68
wait_flash:
	ldr	r1, [r0]		/* read flash status register */
	ands	r1, r1, #1
	beq	/* wait_flash */ -8	/* wait for flash ready */

	/* next copy all the data to the flash buffer */
copy_to_flash_buffer:
	adr	r0, config_table
	ldr	r1, [r0]		/* r1 is location in flash */
	ldr	r2, [r0, #8]
	sub	r0, r0, r2		/* r0 is location in RAM */
	mov	r2, r2, lsr #2		/* r2 is number of words to copy */
copy_loop:
	ldr	r3, [r0], #4
	str	r3, [r1], #4
	subs	r2, r2, #1
	bne	-12 /* copy_loop */

	/* and finally, give the command to write */
write_flash_cmd:
	adr	r0, config_table
	ldr	r1, [r0, #4]		/* r1 is page number */
	mov	r2, #0x400
	sub	r2, r2, #1		
	and	r1, r1, r2		/* r1 &= 0x3FF */
	mov	r1, r1, lsl #8		/* r1 <<= 8 */
	orr	r1, r1, #0x5A000000	/* add "key" */
	orr	r1, r1, #1		/* add page write command */
	mov	r0, #0xFFFFFF64
	str	r1, [r0]		/* command to start the flash write */

	/* how to return to the boot agent??  Neither of these seems to work. */
return_to_boot_agent:
	/* mov	pc, lr */
	bx	lr 


